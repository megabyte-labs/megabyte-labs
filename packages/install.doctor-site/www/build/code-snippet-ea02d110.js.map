{"file":"code-snippet-ea02d110.js","mappings":";;;AAAA,MAAM,cAAc,GAAG,81FAA81F;;MCUx2F,WAAW;;;IAgBtB,wBAAmB,GAAG;MACpB,cAAc,CACZ;QACE,YAAY,EAAE,mBAAmB,IAAI,CAAC,QAAQ,EAAE;QAChD,IAAI,EAAE,GAAG,WAAW,CAAC,QAAQ,qBAAqB,IAAI,CAAC,QAAQ,SAAS;OACzE,EACD,IAAI,CAAC,aAAa,CACnB,CAAC;KACH,CAAC;IAEF,kBAAa,GAAG;MACd,IAAI,KAAK,CAAC,QAAQ;QAAE,OAAO;MAE3B,MAAM,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;MAEjD,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,EAAE,GAAG;QACzC,QAAQ,GAAG,CAAC,QAAQ;UAClB,KAAK,eAAe;YAClB,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAEnC,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI;cACzB,OAAO,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG;kBAC/C,8BAA8B,IAAI,WAAW;kBAC7C,0CAA0C,IAAI,WAAW,CAAC;aAC/D,CAAC,CAAC;YACH,GAAG,CAAC,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACpC,MAAM;UACR,QAAQ;SACT;OACF,CAAC,CAAC;MAEH,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;KACnD,CAAC;;;;EAvCF,iBAAiB;IACf,cAAc,CACZ,EAAE,YAAY,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,WAAW,CAAC,QAAQ,eAAe,EAAE,EACvE,IAAI,CAAC,mBAAmB,CACzB,CAAC;GACH;EAoCD,MAAM;IACJ,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;MACd,OAAO,IAAI,CAAC;KACb;IACD,QACE,EAAC,IAAI,QACH,WAAK,KAAK,EAAE,YAAY,IAAI,CAAC,QAAQ,EAAE,IACrC,YAAM,GAAG,EAAE,CAAC,KAAK,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,IAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAQ,CACxD,CACD,EACP;GACH;;;AAxDD;AACe,oBAAQ,GAAG,6CAA6C,CAAC;;;;;","names":[],"sources":["../stencil-docusaurus-lib/src/components/code-snippet/code-snippet.scss?tag=code-snippet&encapsulation=shadow","../stencil-docusaurus-lib/src/components/code-snippet/code-snippet.tsx"],"sourcesContent":["@use '~prismjs/themes/prism-tomorrow.css';\n\n:host {\n  display: block;\n  min-width: 0;\n  max-width: 100%;\n\n  overflow-x: auto;\n  border-radius: 16px;\n  background: #00233a;\n}\n\n.dollar-sign::before {\n  content: '$ ';\n  color: #4ebdfc;\n}\n\n:not(pre) > code[class*='language-'],\npre[class*='language-'] {\n  padding: 28px 32px;\n  background: #00233a;\n  margin: 0;\n  width: fit-content;\n\n  code {\n    line-height: 1.8;\n    display: block;\n    font-family: 'Roboto Mono', 'Source Code Pro', monospace;\n    font-size: 14px;\n    color: var(--c-carbon-10);\n\n    span {\n      display: inline;\n    }\n\n    .token.selector,\n    .token.important,\n    .token.atrule,\n    .token.keyword,\n    .token.builtin {\n      color: #4ebdfc;\n    }\n\n    .token.string,\n    .token.char,\n    .token.attr-value,\n    .token.regex,\n    .token.variable {\n      color: #00e9ac;\n    }\n  }\n}\n\npre.language-shell-session code {\n  line-height: 200%;\n}\n\n// pre[class*=\"language-shell\"] code::before {\n//   content: '$ '\n// }\n","import { Component, Host, h, Prop, Element, Build } from '@stencil/core';\nimport { importResource } from '../../utils/utils'\n\ndeclare let window\n\n@Component({\n  tag: 'code-snippet',\n  styleUrl: 'code-snippet.scss',\n  shadow: true,\n})\nexport class CodeSnippet {\n  @Element() elm: HTMLElement;\n  @Prop() language: string;\n  @Prop() code!: string;\n\n  // use an exact version so the cdn response is heavily cached\n  private static prismCdn = `https://cdn.jsdelivr.net/npm/prismjs@1.21.0`;\n  private codeEl: HTMLElement;\n\n  componentWillLoad() {\n    importResource(\n      { propertyName: 'Prism', link: `${CodeSnippet.prismCdn}/prism.min.js` },\n      this.loadInPrismLanguage,\n    );\n  }\n\n  loadInPrismLanguage = () => {\n    importResource(\n      {\n        propertyName: `Prism.languages.${this.language}`,\n        link: `${CodeSnippet.prismCdn}/components/prism-${this.language}.min.js`,\n      },\n      this.highlightCode,\n    );\n  };\n\n  highlightCode = async () => {\n    if (Build.isServer) return;\n\n    await customElements.whenDefined('code-snippet');\n\n    window.Prism.hooks.add('before-insert', env => {\n      switch (env.language) {\n        case 'shell-session':\n          const lines = env.code.split('\\n');\n\n          const code = lines.map(line => {\n            return line.trim() === '' || line.trim()[0] === '#'\n              ? `<span class=\"token output\">${line}</span>\\n`\n              : `<span class=\"dollar-sign token output\">${line}</span>\\n`;\n          });\n          env.highlightedCode = code.join('');\n          break;\n        default:\n      }\n    });\n\n    window.Prism.highlightElement(this.codeEl, false);\n  };\n\n  render() {\n    if (!this.code) {\n      return null;\n    }\n    return (\n      <Host>\n        <pre class={`language-${this.language}`}>\n          <code ref={e => (this.codeEl = e)}>{this.code.trim()}</code>\n        </pre>\n      </Host>\n    );\n  }\n}\n"],"version":3}